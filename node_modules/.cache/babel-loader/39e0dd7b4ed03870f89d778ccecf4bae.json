{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(url).then(res => {\n        if (!res.ok) {\n          throw new Error('Could not get blogs from the database');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsLoading(false);\n        setError(null);\n      }).catch(err => {\n        setIsLoading(false);\n        setError(err);\n      });\n    }, 3000);\n  }, [url]); // delete a blog\n\n  const deleteBlog = async id => {\n    const res = await fetch(`${url}/${id}`, {\n      method: 'DELETE'\n    }); //gotta check if the blog was deleted from the server\n\n    res.status === 200 ? setData(data.filter(blog => blog.id !== id)) : alert('There was a problem deleting the blog');\n  };\n\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"oHNKtHcXBLfWEYHeRSlN5KEv5w0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/kayode/Desktop/React/playground/mini-blog/src/components/useFetch.jsx"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","setTimeout","fetch","then","res","ok","Error","json","catch","err","deleteBlog","id","method","status","filter","blog","alert"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACUC,GAAG,IAAI;AACT,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,gBAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OAPL,EAQKJ,IARL,CAQUR,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAZL,EAaKQ,KAbL,CAaWC,GAAG,IAAI;AACVX,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,OAhBL;AAiBH,KAlBS,EAkBP,IAlBO,CAAV;AAoBH,GArBQ,EAqBN,CAACf,GAAD,CArBM,CAAT,CALsB,CA4BtB;;AACA,QAAMgB,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B,UAAMP,GAAG,GAAG,MAAMF,KAAK,CAAE,GAAER,GAAI,IAAGiB,EAAG,EAAd,EAAiB;AACpCC,MAAAA,MAAM,EAAE;AAD4B,KAAjB,CAAvB,CAD6B,CAK7B;;AACAR,IAAAA,GAAG,CAACS,MAAJ,KAAe,GAAf,GACMjB,OAAO,CAACD,IAAI,CAACmB,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhC,CAAD,CADb,GAEMK,KAAK,CAAC,uCAAD,CAFX;AAGH,GATD;;AAWA,SAAO;AAAErB,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAzCD;;GAAMN,Q;;AA2CN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        setTimeout(() => {\n            fetch(url)\n                .then(res => {\n                    if (!res.ok) {\n                        throw new Error('Could not get blogs from the database');\n                    }\n\n                    return res.json()\n                })\n                .then(data => {\n                    setData(data)\n                    setIsLoading(false)\n                    setError(null)\n                })\n                .catch(err => {\n                    setIsLoading(false)\n                    setError(err)\n                })\n        }, 3000);\n\n    }, [url])\n\n    // delete a blog\n    const deleteBlog = async (id) => {\n        const res = await fetch(`${url}/${id}`, {\n            method: 'DELETE',\n        })\n\n        //gotta check if the blog was deleted from the server\n        res.status === 200\n            ? setData(data.filter(blog => blog.id !== id))\n            : alert('There was a problem deleting the blog')\n    }\n\n    return { data, isLoading, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}