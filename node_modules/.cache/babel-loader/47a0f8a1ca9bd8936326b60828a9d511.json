{"ast":null,"code":"var _jsxFileName = \"/Users/kayode/Desktop/React/playground/mini-blog/src/components/Replies.jsx\",\n    _s = $RefreshSig$();\n\nimport LikedComment from './LikedComment';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Replies = ({\n  comments,\n  id\n}) => {\n  _s();\n\n  const [error, setError] = useState(false);\n  const [replies, setReplies] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch('http://192.168.1.98:5000/blogs/' + id, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Could not get data from the database');\n      }\n\n      return res.json();\n    }).then(data => {\n      setReplies(data);\n    }).catch(err => {\n      if (err.name === 'AbortError') {// empty if statement\n      } else {\n        setError(true);\n      }\n    });\n    return () => abortCont.abort();\n  }, [id]);\n\n  const likeComment = id => {\n    setReplies(replies.map(reply => {\n      if (reply.id === id) {} else {\n        return reply;\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentError\",\n      children: \"Cannot retrieve comments \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this), replies && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentSection\",\n      children: replies.discussion.map((discussion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"commentImg\",\n            src: discussion.thumbnail,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentBody\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: discussion.user\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 45\n              }, this), \" \", discussion.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentEmoji\",\n            children: /*#__PURE__*/_jsxDEV(LikedComment, {\n              liked: discussion.liked,\n              likeComment: () => likeComment(discussion.id)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 33\n        }, this)\n      }, discussion.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Replies, \"MXdaosBIvahuOj4n5wBMCVYldAE=\");\n\n_c = Replies;\nexport default Replies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"sources":["/Users/kayode/Desktop/React/playground/mini-blog/src/components/Replies.jsx"],"names":["LikedComment","useState","useEffect","Replies","comments","id","error","setError","replies","setReplies","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","data","catch","err","name","abort","likeComment","map","reply","discussion","index","thumbnail","user","comment","liked"],"mappings":"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","sourcesContent":["import LikedComment from './LikedComment';\nimport { useState, useEffect } from 'react';\n\nconst Replies = ({ comments, id }) => {\n    const [error, setError] = useState(false)\n    const [replies, setReplies] = useState(null)\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        fetch('http://192.168.1.98:5000/blogs/' + id, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw new Error('Could not get data from the database');\n                }\n                return res.json()\n            })\n            .then(data => {\n                setReplies(data)\n            })\n            .catch(err => {\n                if (err.name === 'AbortError') {\n                    // empty if statement\n                } else {\n                    setError(true)\n                }\n\n            })\n\n        return () => abortCont.abort()\n\n    }, [id])\n\n    const likeComment = (id) => {\n        setReplies(\n            replies.map((reply) => {\n                if( reply.id === id ) {\n\n                } else {\n                    return reply\n                }\n            })\n        )\n    }\n\n    return (\n        <>\n            {error && <div className=\"commentError\">Cannot retrieve comments </div>}\n            {replies &&\n                <div className=\"commentSection\">\n                    {\n                        replies.discussion.map((discussion, index) => (\n                            <div key={discussion.id}>\n                                <div className=\"comment\">\n                                    <img className='commentImg' src={discussion.thumbnail} alt=\"\" />\n                                    <div className=\"commentBody\">\n                                        <p> <span>{discussion.user}</span> {discussion.comment}</p>\n\n                                    </div>\n                                    <div className=\"commentEmoji\">\n                                        <LikedComment liked={discussion.liked} key={index} likeComment={() => likeComment(discussion.id)} />\n                                    </div>\n                                </div>\n                            </div>\n                        ))\n\n                    }\n                </div>\n            }\n        </>\n\n    );\n}\n\nexport default Replies;"]},"metadata":{},"sourceType":"module"}