{"ast":null,"code":"var _jsxFileName = \"/Users/kayode/Desktop/React/playground/mini-blog/src/components/Discussions.jsx\",\n    _s = $RefreshSig$();\n\nimport LikedComment from './LikedComment';\nimport LikedReply from './LikedReply';\nimport { useState, useEffect } from 'react';\nimport AddComment from './AddComment';\nimport CommentGoBack from './CommentGoBack';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Discussions = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [error, setError] = useState(false);\n  const [discussions, setDiscussions] = useState(null);\n  const [openReplies, setOpenReplies] = useState(false);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(`http://192.168.1.98:5000/blogs/${id}`, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Could not get data from the database');\n      }\n\n      return res.json();\n    }).then(data => {\n      setDiscussions(data);\n    }).catch(err => {\n      if (err.name === 'AbortError') {// empty if statement\n      } else {\n        setError(true);\n      }\n    });\n    return () => abortCont.abort();\n  }, [id, discussions]); //Like a comment\n\n  const likeComment = did => {\n    const url = `http://192.168.1.98:5000/blogs/${id}`;\n    setDiscussions({ ...discussions,\n      discussion: discussions.discussion.map(discussion => {\n        if (discussion.id === did) {\n          return { ...discussion,\n            liked: !discussion.liked\n          };\n        } else {\n          return discussion;\n        }\n      })\n    });\n    fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ ...discussions,\n        discussion: discussions.discussion.map(discussion => {\n          if (discussion.id === did) {\n            return { ...discussion,\n              liked: !discussion.liked\n            };\n          } else {\n            return discussion;\n          }\n        })\n      })\n    });\n  }; //Like a reply\n\n\n  const likeReply = (xid, did) => {\n    const url = `http://192.168.1.98:5000/blogs/${id}`;\n    setDiscussions({ //get the current discussion\n      ...discussions,\n      //loop through to update\n      discussion: discussions.discussion.map(discussion => {\n        //check if the discussion id matches the one you clicked\n        if (discussion.id === xid) {\n          //if yes, return the new discussion\n          return { //get the current replies\n            ...discussion,\n            //loop through the current replies\n            replies: discussion.replies.map(reply => {\n              //check if the reply id matches the one you clicked \n              if (reply.id === did) {\n                //finally update the liked status\n                return { ...reply,\n                  liked: !reply.liked\n                };\n              } else {\n                //if no, return the old reply\n                return reply;\n              }\n            })\n          };\n        } else {\n          //if no, return the old discussion\n          return discussion;\n        }\n      })\n    });\n    fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ ...discussions,\n        //loop through to update\n        discussion: discussions.discussion.map(discussion => {\n          //check if the discussion id matches the one you clicked\n          if (discussion.id === xid) {\n            //if yes, return the new discussion\n            return { //get the current replies\n              ...discussion,\n              //loop through the current replies\n              replies: discussion.replies.map(reply => {\n                //check if the reply id matches the one you clicked\n                if (reply.id === did) {\n                  //finally update the liked status\n                  return { ...reply,\n                    liked: !reply.liked\n                  };\n                } else {\n                  //if no, return the old reply\n                  return reply;\n                }\n              })\n            };\n          } else {\n            //if no, return the old discussion\n            return discussion;\n          }\n        })\n      })\n    });\n  };\n\n  const toggleComments = (index, id) => {\n    console.log(e);\n    console.log(id - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentError\",\n      children: \"Cannot retrieve comments \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 14\n    }, this), discussions && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentGoBack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(AddComment, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentSection\",\n        children: discussions.discussion.map((discussion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onDoubleClick: () => likeComment(discussion.id),\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"commentImg\",\n              src: discussion.thumbnail,\n              alt: \"userImg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"commentBody\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: discussion.user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 12\n                }, this), \" \", discussion.comment]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"commentEmoji\",\n              children: /*#__PURE__*/_jsxDEV(LikedComment, {\n                liked: discussion.liked,\n                onClick: () => likeComment(discussion.id)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 9\n          }, this), discussion.replies.length >= 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => toggleComments(index, discussion.id),\n            className: \"toggleComments\",\n            children: \"Show replies\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 44\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"replies\",\n            children: discussion.replies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"reply\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"replyImg\",\n                  src: reply.thumbnail,\n                  alt: \"userImg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"replyBody\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: reply.replier\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 15\n                    }, this), \" \", reply.reply]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"replyEmoji\",\n                    children: /*#__PURE__*/_jsxDEV(LikedReply, {\n                      liked: reply.liked,\n                      onClick: e => likeReply(e, discussion.id, reply.id)\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 15\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 14\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 12\n              }, this)\n            }, reply.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 11\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 9\n          }, this)]\n        }, discussion.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(Discussions, \"7mETqnJSVTENnSlMBMJw32a69FA=\", false, function () {\n  return [useParams];\n});\n\n_c = Discussions;\nexport default Discussions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Discussions\");","map":{"version":3,"sources":["/Users/kayode/Desktop/React/playground/mini-blog/src/components/Discussions.jsx"],"names":["LikedComment","LikedReply","useState","useEffect","AddComment","CommentGoBack","useParams","Discussions","id","error","setError","discussions","setDiscussions","openReplies","setOpenReplies","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","data","catch","err","name","abort","likeComment","did","url","discussion","map","liked","method","headers","body","JSON","stringify","likeReply","xid","replies","reply","toggleComments","index","console","log","e","thumbnail","user","comment","length","replier"],"mappings":"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","sourcesContent":["import LikedComment from './LikedComment';\nimport LikedReply from './LikedReply';\nimport { useState, useEffect } from 'react';\nimport AddComment from './AddComment';\nimport CommentGoBack from './CommentGoBack';\nimport { useParams } from 'react-router-dom';\n\nconst Discussions = () => {\n\tconst { id } = useParams();\n\tconst [error, setError] = useState(false);\n\tconst [discussions, setDiscussions] = useState(null);\n\tconst [openReplies, setOpenReplies] = useState(false)\n\n\tuseEffect(() => {\n\t\tconst abortCont = new AbortController();\n\n\t\tfetch(`http://192.168.1.98:5000/blogs/${id}`, { signal: abortCont.signal })\n\t\t\t.then((res) => {\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error('Could not get data from the database');\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tsetDiscussions(data);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t\t// empty if statement\n\t\t\t\t} else {\n\t\t\t\t\tsetError(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn () => abortCont.abort();\n\t}, [id, discussions]);\n\n\t//Like a comment\n\tconst likeComment = (did) => {\n\t\tconst url = `http://192.168.1.98:5000/blogs/${id}`;\n\t\tsetDiscussions({\n\t\t\t...discussions,\n\t\t\tdiscussion: discussions.discussion.map((discussion) => {\n\t\t\t\tif (discussion.id === did) {\n\t\t\t\t\treturn { ...discussion, liked: !discussion.liked };\n\t\t\t\t} else {\n\t\t\t\t\treturn discussion;\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\t\tfetch(url, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t...discussions,\n\t\t\t\tdiscussion: discussions.discussion.map((discussion) => {\n\t\t\t\t\tif (discussion.id === did) {\n\t\t\t\t\t\treturn { ...discussion, liked: !discussion.liked };\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn discussion;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}),\n\t\t});\n\t};\n\n\t//Like a reply\n\tconst likeReply = (xid, did) => {\n\t\tconst url = `http://192.168.1.98:5000/blogs/${id}`;\n\t\tsetDiscussions({\n\t\t\t//get the current discussion\n\t\t\t...discussions,\n\t\t\t//loop through to update\n\t\t\tdiscussion: discussions.discussion.map((discussion) => {\n\t\t\t\t//check if the discussion id matches the one you clicked\n\t\t\t\tif (discussion.id === xid) {\n\t\t\t\t\t//if yes, return the new discussion\n\t\t\t\t\treturn {\n\t\t\t\t\t\t//get the current replies\n\t\t\t\t\t\t...discussion,\n\t\t\t\t\t\t//loop through the current replies\n\t\t\t\t\t\treplies: discussion.replies.map((reply) => {\n\t\t\t\t\t\t\t//check if the reply id matches the one you clicked \n\t\t\t\t\t\t\tif (reply.id === did) {\n\t\t\t\t\t\t\t\t//finally update the liked status\n\t\t\t\t\t\t\t\treturn { ...reply, liked: !reply.liked };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//if no, return the old reply\n\t\t\t\t\t\t\t\treturn reply;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t//if no, return the old discussion\n\t\t\t\t\treturn discussion;\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\t\tfetch(url, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t...discussions,\n\t\t\t\t//loop through to update\n\t\t\t\tdiscussion: discussions.discussion.map((discussion) => {\n\t\t\t\t\t//check if the discussion id matches the one you clicked\n\t\t\t\t\tif (discussion.id === xid) {\n\t\t\t\t\t\t//if yes, return the new discussion\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t//get the current replies\n\t\t\t\t\t\t\t...discussion,\n\t\t\t\t\t\t\t//loop through the current replies\n\t\t\t\t\t\t\treplies: discussion.replies.map((reply) => {\n\t\t\t\t\t\t\t\t//check if the reply id matches the one you clicked\n\t\t\t\t\t\t\t\tif (reply.id === did) {\n\t\t\t\t\t\t\t\t\t//finally update the liked status\n\t\t\t\t\t\t\t\t\treturn { ...reply, liked: !reply.liked };\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//if no, return the old reply\n\t\t\t\t\t\t\t\t\treturn reply;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//if no, return the old discussion\n\t\t\t\t\t\treturn discussion;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}),\n\t\t});\n\t};\n\n\tconst toggleComments = (index, id) => {\n\t\tconsole.log(e)\n\t\tconsole.log(id-1)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{error && <div className=\"commentError\">Cannot retrieve comments </div>}\n\t\t\t{discussions && (\n\t\t\t\t<>\n\t\t\t\t\t<CommentGoBack />\n\t\t\t\t\t<AddComment />\n\n\t\t\t\t\t<div className=\"commentSection\">\n\t\t\t\t\t\t{discussions.discussion.map((discussion, index) => (\n\t\t\t\t\t\t\t<div key={discussion.id}>\n\t\t\t\t\t\t\t\t<div onDoubleClick={() => likeComment(discussion.id)} className=\"comment\">\n\t\t\t\t\t\t\t\t\t<img className=\"commentImg\" src={discussion.thumbnail} alt=\"userImg\" />\n\t\t\t\t\t\t\t\t\t<div className=\"commentBody\">\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t<span>{discussion.user}</span> {discussion.comment}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"commentEmoji\">\n\t\t\t\t\t\t\t\t\t\t<LikedComment\n\t\t\t\t\t\t\t\t\t\t\tliked={discussion.liked}\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => likeComment(discussion.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{discussion.replies.length >= 1 && <div key={index} onClick={()=> toggleComments(index, discussion.id)} className=\"toggleComments\">Show replies</div>}\n\t\t\t\t\t\t\t\t<div className=\"replies\">\n\t\t\t\t\t\t\t\t\t{discussion.replies.map((reply, index) => (\n\t\t\t\t\t\t\t\t\t\t<div key={reply.id}>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply\">\n\t\t\t\t\t\t\t\t\t\t\t\t<img className=\"replyImg\" src={reply.thumbnail} alt=\"userImg\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"replyBody\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{reply.replier}</span> {reply.reply}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"replyEmoji\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LikedReply\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tliked={reply.liked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => likeReply(e, discussion.id, reply.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Discussions;\n"]},"metadata":{},"sourceType":"module"}