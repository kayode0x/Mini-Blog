{"ast":null,"code":"var _jsxFileName = \"/Users/kayode/Desktop/React/playground/mini-blog/src/components/Replies.jsx\",\n    _s = $RefreshSig$();\n\nimport useFetch from './useFetch';\nimport { FaRegHeart, FaHeart } from \"react-icons/fa\";\nimport { IconContext } from 'react-icons';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Replies = ({\n  comments,\n  id\n}) => {\n  _s();\n\n  const {\n    data: blogs,\n    error\n  } = useFetch(`http://192.168.1.98:5000/blogs/${id}`);\n  const [liked, setLiked] = useState(false);\n  const [commentMatch, setCommentMatch] = useState(false);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch('http://192.168.1.98:5000/blogs/' + id, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Could not get data from the database');\n      }\n\n      return res.json();\n    }).then(data => {\n      console.log(data.discussion);\n    }).catch(err => {\n      if (err.name === 'AbortError') {// empty if statement\n      } else {\n        alert(err.message);\n      }\n    });\n    return () => abortCont.abort();\n  }, [id, liked]);\n\n  const likeComment = id => {\n    liked ? setLiked(false) : setLiked(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentError\",\n      children: \"Cannot retrieve comments \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }, this), blogs && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentSection\",\n      children: {\n        /* blogs.discussion.map((discussion) => (\n           <div key={discussion.id}>\n               \n           </div>\n        )) */\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Replies, \"kNNcC9KJO3wph5hHDpOvyfNG6q4=\", false, function () {\n  return [useFetch];\n});\n\n_c = Replies;\nexport default Replies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"sources":["/Users/kayode/Desktop/React/playground/mini-blog/src/components/Replies.jsx"],"names":["useFetch","FaRegHeart","FaHeart","IconContext","useState","useEffect","Replies","comments","id","data","blogs","error","liked","setLiked","commentMatch","setCommentMatch","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","console","log","discussion","catch","err","name","alert","message","abort","likeComment"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,gBAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAsB;AAAA;;AAElC,QAAM;AAAEC,IAAAA,IAAI,EAAEC,KAAR;AAAeC,IAAAA;AAAf,MAAyBX,QAAQ,CAAE,kCAAiCQ,EAAG,EAAtC,CAAvC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,KAAK,CAAC,oCAAoCV,EAArC,EAAyC;AAAEW,MAAAA,MAAM,EAAEH,SAAS,CAACG;AAApB,KAAzC,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANL,EAOKJ,IAPL,CAOUX,IAAI,IAAI;AACVgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAI,CAACkB,UAAjB;AACH,KATL,EAUKC,KAVL,CAUWC,GAAG,IAAI;AACV,UAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B,CAC3B;AACH,OAFD,MAEO;AACHC,QAAAA,KAAK,CAACF,GAAG,CAACG,OAAL,CAAL;AACH;AAEJ,KAjBL;AAmBA,WAAO,MAAMhB,SAAS,CAACiB,KAAV,EAAb;AAEH,GAxBQ,EAwBN,CAACzB,EAAD,EAAKI,KAAL,CAxBM,CAAT;;AA0BA,QAAMsB,WAAW,GAAI1B,EAAD,IAAQ;AACxBI,IAAAA,KAAK,GAAGC,QAAQ,CAAC,KAAD,CAAX,GAAqBA,QAAQ,CAAC,IAAD,CAAlC;AAEH,GAHD;;AAKA,sBACI;AAAA,eACKF,KAAK,iBAAI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADd,EAEMD,KAAK,iBAAI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAEH;AAAC;AACrB;AACA;AACA;AACA;AAJoB;AAFG;AAAA;AAAA;AAAA;AAAA,YAFf;AAAA,kBADJ;AAeH,CApDD;;GAAMJ,O;UAE6BN,Q;;;KAF7BM,O;AAsDN,eAAeA,OAAf","sourcesContent":["import useFetch from './useFetch';\nimport { FaRegHeart, FaHeart } from \"react-icons/fa\";\nimport { IconContext } from 'react-icons';\nimport { useState, useEffect } from 'react';\n\nconst Replies = ({ comments, id }) => {\n\n    const { data: blogs, error } = useFetch(`http://192.168.1.98:5000/blogs/${id}`);\n    const [liked, setLiked] = useState(false);\n    const [commentMatch, setCommentMatch] = useState(false);\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        fetch('http://192.168.1.98:5000/blogs/' + id, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw new Error('Could not get data from the database');\n                }\n                return res.json()\n            })\n            .then(data => {\n                console.log(data.discussion)\n            })\n            .catch(err => {\n                if (err.name === 'AbortError') {\n                    // empty if statement\n                } else {\n                    alert(err.message);\n                }\n\n            })\n\n        return () => abortCont.abort()\n\n    }, [id, liked])\n\n    const likeComment = (id) => {\n        liked ? setLiked(false) : setLiked(true)\n        \n    }\n\n    return (\n        <>\n            {error && <div className=\"commentError\">Cannot retrieve comments </div>}\n            { blogs && <div className=\"commentSection\">\n                {\n                    {/* blogs.discussion.map((discussion) => (\n                        <div key={discussion.id}>\n                            \n                        </div>\n                    )) */}\n                }\n            </div> }\n        </>\n        \n    );\n}\n\nexport default Replies;"]},"metadata":{},"sourceType":"module"}